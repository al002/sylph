// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: ethereum/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EthereumService_GetLatestBlock_FullMethodName     = "/ethereum.EthereumService/GetLatestBlock"
	EthereumService_GetBlock_FullMethodName           = "/ethereum.EthereumService/GetBlock"
	EthereumService_SubscribeNewBlocks_FullMethodName = "/ethereum.EthereumService/SubscribeNewBlocks"
	EthereumService_GetBlockRange_FullMethodName      = "/ethereum.EthereumService/GetBlockRange"
)

// EthereumServiceClient is the client API for EthereumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthereumServiceClient interface {
	GetLatestBlock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLatestBlockResponse, error)
	// Get block by number
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	// Stream new blocks
	SubscribeNewBlocks(ctx context.Context, in *SubscribeNewBlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlockData], error)
	// Get historical blocks
	GetBlockRange(ctx context.Context, in *GetBlockRangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlockData], error)
}

type ethereumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEthereumServiceClient(cc grpc.ClientConnInterface) EthereumServiceClient {
	return &ethereumServiceClient{cc}
}

func (c *ethereumServiceClient) GetLatestBlock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLatestBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestBlockResponse)
	err := c.cc.Invoke(ctx, EthereumService_GetLatestBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, EthereumService_GetBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumServiceClient) SubscribeNewBlocks(ctx context.Context, in *SubscribeNewBlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlockData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EthereumService_ServiceDesc.Streams[0], EthereumService_SubscribeNewBlocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeNewBlocksRequest, BlockData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EthereumService_SubscribeNewBlocksClient = grpc.ServerStreamingClient[BlockData]

func (c *ethereumServiceClient) GetBlockRange(ctx context.Context, in *GetBlockRangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlockData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EthereumService_ServiceDesc.Streams[1], EthereumService_GetBlockRange_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBlockRangeRequest, BlockData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EthereumService_GetBlockRangeClient = grpc.ServerStreamingClient[BlockData]

// EthereumServiceServer is the server API for EthereumService service.
// All implementations must embed UnimplementedEthereumServiceServer
// for forward compatibility.
type EthereumServiceServer interface {
	GetLatestBlock(context.Context, *emptypb.Empty) (*GetLatestBlockResponse, error)
	// Get block by number
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	// Stream new blocks
	SubscribeNewBlocks(*SubscribeNewBlocksRequest, grpc.ServerStreamingServer[BlockData]) error
	// Get historical blocks
	GetBlockRange(*GetBlockRangeRequest, grpc.ServerStreamingServer[BlockData]) error
	mustEmbedUnimplementedEthereumServiceServer()
}

// UnimplementedEthereumServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEthereumServiceServer struct{}

func (UnimplementedEthereumServiceServer) GetLatestBlock(context.Context, *emptypb.Empty) (*GetLatestBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlock not implemented")
}
func (UnimplementedEthereumServiceServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedEthereumServiceServer) SubscribeNewBlocks(*SubscribeNewBlocksRequest, grpc.ServerStreamingServer[BlockData]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNewBlocks not implemented")
}
func (UnimplementedEthereumServiceServer) GetBlockRange(*GetBlockRangeRequest, grpc.ServerStreamingServer[BlockData]) error {
	return status.Errorf(codes.Unimplemented, "method GetBlockRange not implemented")
}
func (UnimplementedEthereumServiceServer) mustEmbedUnimplementedEthereumServiceServer() {}
func (UnimplementedEthereumServiceServer) testEmbeddedByValue()                         {}

// UnsafeEthereumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthereumServiceServer will
// result in compilation errors.
type UnsafeEthereumServiceServer interface {
	mustEmbedUnimplementedEthereumServiceServer()
}

func RegisterEthereumServiceServer(s grpc.ServiceRegistrar, srv EthereumServiceServer) {
	// If the following call pancis, it indicates UnimplementedEthereumServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EthereumService_ServiceDesc, srv)
}

func _EthereumService_GetLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumServiceServer).GetLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumService_GetLatestBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumServiceServer).GetLatestBlock(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumService_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumServiceServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumService_SubscribeNewBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeNewBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EthereumServiceServer).SubscribeNewBlocks(m, &grpc.GenericServerStream[SubscribeNewBlocksRequest, BlockData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EthereumService_SubscribeNewBlocksServer = grpc.ServerStreamingServer[BlockData]

func _EthereumService_GetBlockRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlockRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EthereumServiceServer).GetBlockRange(m, &grpc.GenericServerStream[GetBlockRangeRequest, BlockData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EthereumService_GetBlockRangeServer = grpc.ServerStreamingServer[BlockData]

// EthereumService_ServiceDesc is the grpc.ServiceDesc for EthereumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EthereumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.EthereumService",
	HandlerType: (*EthereumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestBlock",
			Handler:    _EthereumService_GetLatestBlock_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _EthereumService_GetBlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeNewBlocks",
			Handler:       _EthereumService_SubscribeNewBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBlockRange",
			Handler:       _EthereumService_GetBlockRange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ethereum/service.proto",
}
